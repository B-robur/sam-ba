/*!
\qmltype Connection
\inqmlmodule SAMBA
\brief The Connection type represents a physical connection to a programmable device.

This type contains methods to communicate with a device:
\list
\li reading/writing memory
\li requesting execution of code
\li basic functions to load and execute applets
\endlist

It is only intended to define the method prototypes and does not communicate with anything.
Please use any of the types that inherit from \l{SAMBA::}{Connection} for actual usable implementations.

\section2 Reading and Writing Memory

The following methods are provided to read and write to memory:

\table
\header
\li Name
\li Description
\row
\li \l{Connection::}{read}
\li Reads a memory block
\row
\li \l{Connection::}{readu8}/\l{Connection::}{reads8}
\li Reads single (un)signed byte
\row
\li \l{Connection::}{readu16}/\l{Connection::}{reads16}
\li Reads single (un)signed 16-bit word
\row
\li \l{Connection::}{readu32}/\l{Connection::}{reads32}
\li Reads single (un)signed 32-bit word
\row
\li \l{Connection::}{write}
\li Writes a memory block
\row
\li \l{Connection::}{writeu8}/\l{Connection::}{writes8}
\li Writes single (un)signed byte
\row
\li \l{Connection::}{writeu16}/\l{Connection::}{writes16}
\li Writes single (un)signed 16-bit word
\row
\li \l{Connection::}{writeu32}/\l{Connection::}{writes32}
\li Writes single (un)signed 32-bit word
\endtable

For example, to read a 32-bit unsigned word at address 0x12345678:
\code
var data = connection.readu32(0x12345678)
\endcode

To write unsigned 32-bit value 0x42 to address 0x12345678:
\code
connection.writeu32(0x12345678, 0x42)
\endcode

\section2 Executing Code

The \tt go method can be used to execute code on the device. It make the CPU jump to the given address.
Please note that depending on the communication method, the executed code may have to give the control back to its caller.
SAM-BA \l{SAMBA::Applet}{Applets} contain such code to give back control to SAM-BA Monitor.

For example, to execute code at address 0x12345678:
\code
connection.go(0x12345678)
\endcode

\section2 Loading and Running Applets

The Connection type also contains methods to load and execute applets (see \l{SAMBA::Applet}{Applet} for more information on SAM-BA applets).
The methods related to applet handling are:
\table
\header \li Name \li Description
\row \li appletUpload \li Upload the applet code to the device
\row \li appletMailboxRead \li Reads single unsigned 32-bit word from the mailbox
\row \li appletBufferRead \li Reads a block from the applet buffer
\row \li appletBufferWrite \li Writes a block into the applet buffer
\row \li appletExecute \li Writes parameters in the applet mailbox and execute the applet code
\endtable

For example, to load and initialize an applet:
\code
connection.appletUpload(applet)
connection.appletExecute("init")
\endcode
This example assumes that:
\list
\li the applet initialization command is named "init"
\li it takes no arguments
\endlist

To read a 0x42 bytes block at offset 0x1234 from a "memory" applet:
\code
connection.appletExecute("read", [ connection.applet.bufferAddr, 0x42, 0x1234 ])
var block = connection.appletBufferRead(0x42)
\endcode
This example assumes that:
\list
\li the applet has already been loaded/intialized
\li its read command is named "read" and that it takes as arguments the buffer address, the number of bytes to read and the starting address
\endlist

It is recommended to use the AppletLoader helper type when using applets. It contains several methods to facilitate communication with applets.
*/

/*!
\qmlproperty string Connection::port
\brief The connection port (value/format is connection-specific)
*/

/*!
\qmlproperty Applet Connection::applet
\brief The current applet, or \tt undefined if no applet is loaded.
*/

/*!
\qmlsignal Connection::connectionOpened()
\brief This signal is triggered when the connection has been opened successfully.
*/

/*!
\qmlsignal Connection::connectionFailed(string message)
\brief This signal is triggered when the connection failed to open.

The \a message parameter contains the failure cause.
*/

/*!
\qmlsignal Connection::connectionClosed()
\brief This signal is triggered when the connection has been closed.
*/

/*!
\qmlmethod list<string> Connection::availablePorts()
\brief Returns port names for the detected connections.
*/

/*!
\qmlmethod void Connection::open()
\brief Opens the connection.

On success, the connectionOpened signal will be raised.  If an error occurrs,
the connectionFailed signal will be raised with the failure cause as argument.
*/

/*!
\qmlmethod void Connection::close()
\brief Closes the connection.

The connectionClosed signal will be raised when the connection is closed.
*/

/*!
\qmlmethod int Connection::readu8(int address)
\brief Read a single unsigned byte at the given \a address.
*/

/*!
\qmlmethod int Connection::readu16(int address)
\brief Read a single unsigned 16-bit word at the given \a address.
*/

/*!
\qmlmethod int Connection::readu32(int address)
\brief Read a single unsigned 32-bit word at the given \a address.
*/

/*!
\qmlmethod int Connection::reads8(int address)
\brief Read a single signed byte at the given \a address.
*/

/*!
\qmlmethod int Connection::reads16(int address)
\brief Read a single signed 16-bit word at the given \a address.
*/

/*!
\qmlmethod int Connection::reads32(int address)
\brief Read a single signed 32-bit word at the given \a address.
*/

/*!
\qmlmethod ByteArray Connection::read(int address, int length)
\brief Read \a length bytes at address \a address.

Returns a ByteArray with the data on success, or \tt undefined if an error
occured.
*/

/*!
\qmlmethod bool Connection::writeu8(int address, int data)
\brief Write unsigned byte \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::writeu16(int address, int data)
\brief Write unsigned 16-bit word \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::writeu32(int address, int data)
\brief Write unsigned 32-bit word \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::writes8(int address, int data)
\brief Write signed byte \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::writes16(int address, int data)
\brief Write signed 16-bit word \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::writes32(int address, int data)
\brief Write signed 32-bit word \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::write(int address, ByteArray data)
\brief Write byte array \a data at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::go(int address)
\brief Execute code at address \a address.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod bool Connection::appletUpload(Applet applet)
\brief Uploads an \a applet to the device.

The applet code is written at the applet \tt codeAddr but not code is executed.

Returns true on success, false otherwise.
*/

/*!
\qmlmethod int Connection::appletMailboxRead(int index)
\brief Reads unsigned 32-bit word at index \a index in the applet mailbox.
*/

/*!
\qmlmethod ByteArray Connection::appletBufferRead(int length)
\brief Reads \a length bytes from the applet buffer.

Returns the data on success, \tt undefined if an error occurred or if the
requested length is greater than the current applet buffer size.
*/

/*!
\qmlmethod bool Connection::appletBufferWrite(ByteArray data)
\brief Writes \a data into the applet buffer.

Returns true on success, false if an error occurred or if the \a data length is
greater than the current applet buffer.
*/

/*!
\qmlmethod int Connection::appletExecute(string command, var arguments, int retries)
\brief Execute applet \a command with \a arguments and try \a retries times to
poll for completion.

Arguments can be supplied a single integer if there is only one
argument, or an array of integers if multiple arguments are needed.

After an applet command is started, the Connection will poll for applet
completion using an adaptative timeout between poll cycles.  First polling is
done just after command execution, subsequent retries will wait before checking
for completion.  The initial delay is 100 microseconds and is multiplied by 1.5
at each iteration until the command is complete or the maximum number of
retries is reached.  The default number of retries if not specified is 20.

Returns the applet return code. Zero (0) is usually means success and anything
else is an error.  The values of the error codes are applet-specific and -1 is
returned for unsupported commands or when the maximum number of polling retries
was reached.
*/
